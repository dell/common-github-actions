# Copyright (c) 2025 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to update Dell packages to the latest commits on CSM based projects
name: Update Dell Packages to Latest Commits

on:
  schedule:
    - cron: '0 0 * * 1' # Runs every Monday at midnight
  workflow_call:
  # Can be manually triggered
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Clean Go module cache
      run: |
        go clean -modcache

    - name: Get latest commit SHAs
      run: |
        REPOS=(
          "github.com/dell/goscaleio"
          "github.com/dell/gopowermax"
          "github.com/dell/gounity"
          "github.com/dell/goisilon"
          "github.com/dell/gopowerstore"
          "github.com/dell/gobrick"
          "github.com/dell/gocsi"
          "github.com/dell/goiscsi"
          "github.com/dell/gonvme"
          "github.com/dell/goobjectscale"
          "github.com/dell/gofsutil"
          "github.com/dell/dell-csi-extensions"
          "github.com/dell/csi-metadata-retriever"
          "github.com/dell/csi-volumegroup-snapshotter"
        )

        SHAS=""
        for REPO in "${REPOS[@]}"; do
          LATEST_SHA=$(git ls-remote https://$REPO HEAD | awk '{print $1}')
          SHAS+="$REPO@$LATEST_SHA\n"
        done
        echo "SHAS<<EOF" >> $GITHUB_ENV
        echo -e "$SHAS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "Latest SHAs: $SHAS"

    - name: Update packages in go.mod
      run: |
        set +e
        echo "${{ env.SHAS }}" | while IFS= read -r line; do
          REPO=$(echo $line | cut -d'@' -f1)
          SHA=$(echo $line | cut -d'@' -f2)

          echo "Processing $REPO@$SHA"

          if [[ $REPO == "github.com/dell/dell-csi-extensions" ]]; then
            SUBPACKAGES=("common" "migration" "podmon" "replication" "volumeGroupSnapshot")
            for SUBPACKAGE in "${SUBPACKAGES[@]}"; do
              if grep -q "$REPO/$SUBPACKAGE" go.mod; then
                echo "Updating $REPO/$SUBPACKAGE@$SHA"
                go get ${REPO}/${SUBPACKAGE}@${SHA}
              else
                echo "Skipping $REPO/$SUBPACKAGE: not a known dependency"
              fi
            done
            continue
          fi

          MODULE_PATH=$(go list -m -f '{{.Path}}' $REPO  2>/dev/null)
          if [[ $? -ne 0 ]]; then
            echo "Skipping $REPO: not a known dependency"
            continue
          fi

          if [[ $MODULE_PATH == *"/v2"* ]]; then
            echo "Updating ${REPO}/v2@$SHA"
            go get ${REPO}/v2@${SHA}  || echo "Failed to update ${REPO}/v2@$SHA"
          else
            echo "Updating $REPO@$SHA"
            go get ${REPO}@${SHA} || echo "Failed to update ${REPO}@$SHA"
          fi
        done
        go mod tidy

    # Needed for signing commits using Github App tokens
    # See: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#commit-signing
    - uses: actions/create-github-app-token@v1.11.1
      id: generate-token
      with:
        app-id: ${{ vars.CSM_RELEASE_APP_ID }}
        private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ steps.generate-token.outputs.token }}
        branch: "update-dependencies-to-latest-commits"
        commit-message: "Update packages to latest commits"
        title: "Update Dell packages to latest commits"
        body: |
          This PR updates the specified packages to their latest commit.
          Auto-generated by [common-github-actions](https://github.com/dell/common-github-actions)
        sign-commits: true
        delete-branch: true
