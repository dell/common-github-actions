# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to run multiple workflow checks on Golang based projects
name: Common Workflows

on:
  workflow_call:
    inputs:
      autofix:
        required: false
        type: string

# Set defaults
env:
  # unit test action
  CODE_COVERAGE_TARGET: ${{ vars.CODE_COVERAGE_TARGET || 90 }}
  CODE_COVERAGE_DIR: ${{ vars.CODE_COVERAGE_DIR || '.' }}
  SKIP_LIST: ${{ vars.PACKAGE_SKIP_LIST || '' }}
  RACE_DETECTOR: ${{ vars.RACE_DETECTOR || true }}
  SKIP_TEST: ${{ vars.SKIP_TEST || '' }}
  RUN_TEST: ${{ vars.RUN_TEST || '' }}
  EXCLUDE_DIRECTORIES: ${{ vars.EXCLUDE_DIRECTORIES || '' }}

  # gosec action
  GOSEC_EXCLUDES: ${{ vars.GOSEC_EXCLUDES || '' }}

jobs:
  # Run unit tests
  gocoverage:
    name: Unit tests and package coverage
    runs-on: ubuntu-latest
    # Needed for "fgrosse/go-coverage-report"
    permissions:
      contents: read
      actions: read  # to download code coverage results from "Run unit tests and check package coverage" job
      pull-requests: write # write permission needed to comment on PR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Run unit tests and check package coverage
        id: test_coverage
        uses: dell/common-github-actions/go-code-tester@main
        with:
          threshold: ${{ env.CODE_COVERAGE_TARGET }}
          test-folder: ${{ env.CODE_COVERAGE_DIR }}
          skip-list: ${{ env.SKIP_LIST }}
          race-detector: ${{ env.RACE_DETECTOR }}
          skip-test: ${{ env.SKIP_TEST }}
          run-test: ${{ env.RUN_TEST }}
          exclude-directory: ${{ env.EXCLUDE_DIRECTORIES }}

      - name: Coverage results
        run: |
          echo -e "Coverage results: ${{ steps.test_coverage.outputs.coverage }}"

      - name: Upload coverprofile
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: ${{ steps.test_coverage.outputs.code_coverage_artifact }}

      # Used as an indicator of the quality of changes introduced for a package
      # by showing if package coverage has increased, decreased, or stayed the same
      - name: Generate coverage report
        # we don't want this check to run on merging to main because it will reset coverage.txt to an empty artifact
        if: ${{ !cancelled() }} && github.event.name == 'pull_request'
        # code coverage profiles are uploaded as GitHub artifacts, which automatically expire after 90 days
        # if no coverage profile exists on main branch yet, then the step will fail
        continue-on-error: true
        uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: "code-coverage"
          coverage-file-name: "new_coverage.txt"

  # Check sources for security vulnerabilities
  security:
    name: GoSec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec
        uses: dell/common-github-actions/gosec-runner@main
        with:
          excludes: ${{ env.GOSEC_EXCLUDES }}

  # Check sources for formatting and vetting
  formatter_vetter:
    name: Go Formatter and Vetter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: gofmt and go vet
        uses: dell/common-github-actions/go-code-formatter-vetter@main

  # Check sources files for malware
  malware_security_scan:
    name: Malware Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri

  # Commenting this out for now. This requires that we allow auto-merge on all PRs, which is not advised.
  # See discussion: https://github.com/orgs/community/discussions/150835
  # dependabot_automerge:
  #   name: Automerge Dependabot PRs
  #   uses: dell/common-github-actions/.github/workflows/dependabot-automerge.yml@main

  # TODO: Need to reconsider how to deal with generated files. Need to also test on a wider set of csm repositories.
  #check-license-header:
    #runs-on: ubuntu-latest
    #steps:
      #- name: Checkout repository
       # uses: actions/checkout@v4

     # - name: Check license headers
       # uses: dell/common-github-actions/license-checker@main
       # with:
        #  autofix: false
