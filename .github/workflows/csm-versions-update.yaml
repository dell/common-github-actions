# Copyright (c) 2025 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to perform update of CSM Versions.
name: CSM Versions Update

# Invocable as a reusable workflow
on:
  workflow_call:

jobs:
  csm-versions-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get CSM Versions from dell/csm
        id: vars
        run: |
          curl -s https://raw.githubusercontent.com/dell/csm/refs/heads/main/config/csm-versions.yaml > versions-content.txt

          # Parse out and save each needed CSM version
          readarray -t lines < versions-content.txt
          for line in "${lines[@]}"; do
            name=$(echo $line | cut -d: -f1 | tr -d ' ')
            version=$(echo $line | cut -d: -f2 | tr -d ' ')

            if [[ $name == "csi-attacher" ]]; then
              echo "attacher=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csi-provisioner" ]]; then
              echo "provisioner=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csi-snapshotter" ]]; then
              echo "snapshotter=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csi-resizer" ]]; then
              echo "resizer=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csi-node-driver-registrar" ]]; then
              echo "registrar=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csi-external-health-monitor-controller" ]]; then
              echo "health_monitor=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "csm-version" ]]; then
              echo "csm=$version" >> "$GITHUB_OUTPUT"
            elif [[ $name == "otel-collector" ]]; then
              echo "otel_collector=$version" >> "$GITHUB_OUTPUT"  
            fi

          done

      - name: CSM docs versions update
        if: ${{ github.repository == 'dell/csm-docs' }}
        env:
          attacher: ${{ steps.vars.outputs.attacher }}
          provisioner: ${{ steps.vars.outputs.provisioner }}
          snapshotter: ${{ steps.vars.outputs.snapshotter }}
          resizer: ${{ steps.vars.outputs.resizer }}
          registrar: ${{ steps.vars.outputs.registrar }}
          health_monitor: ${{ steps.vars.outputs.health_monitor }}
          otel_collector: ${{ steps.vars.outputs.otel_collector }}
          csm: ${{ steps.vars.outputs.csm }}
        run: |
          declare -A latest_images
          latest_images[csi-attacher]=$attacher
          latest_images[csi-provisioner]=$provisioner
          latest_images[csi-snapshotter]=$snapshotter
          latest_images[csi-resizer]=$resizer
          latest_images[csi-node-driver-registrar]=$registrar
          latest_images[csi-external-health-monitor-controller]=$health_monitor
          latest_images[opentelemetry-collector]=$otel_collector

          # Global variables
          updated_shortcodes=""
          updated_installation_wizard=""

          update_shortcodes() {
            for key in "${!latest_images[@]}"; do
              path="layouts/shortcodes/version-docs.html"
              name=$(echo $key | tr '-' '_')
              version=${latest_images[$key]}

              # If no shortcode was found, we don't need to update it
              if ! grep -q "\"$name.*\" -}}" $path; then
                echo "No shortcode found for $key. Skipping."
                continue
              fi

              old_shortcode=$(grep -r "\"$name.*\" -}}" $path)

              # If shortcode already contains the version, we don't need to update it
              if [[ "$old_shortcode" == *"$version"* ]]; then
                continue
              fi

              new_shortcode=$(echo $old_shortcode | sed "s/}}.*/}}$version/")

              updated_shortcodes+="\t$key to $version\n"
              sed -i "s|${old_shortcode}|${new_shortcode}|g" $path
            done
          }

          update_installation_wizard() {
            echo "Starting installation wizard update..."
            # Sanitize the CSM version
            csm_version=$(echo $csm | tr -d 'v' | tr -d '\r')

            # The installation wizard templates should have the latest version of the CSM.
            wizard_files=$(find content/docs/getting-started/installation/installationwizard/src/templates/ -name "*$csm_version*")

            if [ -z "$wizard_files" ]; then
              echo "No Installation Wizard content for latest CSM found. Skipping."
              return
            fi

            for file in $wizard_files; do
              updated_images=""
              for key in "${!latest_images[@]}"; do
                # Retrieve the current version from the file of the sidecar.
                old_version=$(grep -r -m 1 "$key:" $file | xargs)
                if [ -z "$old_version" ]; then
                  continue
                fi

                # All instance of the image in a file either go "image:/value:" so we remove that to get the pure image.
                old_version=$(echo $old_version | cut -d':' -f2- | tr -d ' ')
                new_version=$(echo $old_version | sed "s/:.*/:${latest_images[$key]}/")

                # If the version is the same, then we skip
                if [ "$old_version" == "$new_version" ]; then
                  continue
                fi

                updated_images+="\t$new_version\n"

                # Update the version in the file.
                sed -i "s|${old_version}|${new_version}|g" $file
              done

              if [ -z "$updated_images" ]; then
                  continue
              fi

              updated_installation_wizard+="Updated $file with the following images:\n$updated_images\n"
            done
          }

          handle_results() {
            if [ -z "$updated_shortcodes" ] && [ -z "$updated_installation_wizard" ]; then
              echo "No changes were made. Skipping."
              return
            fi

            if [ -n "$updated_shortcodes" ]; then
              echo -e "Updated Shortcodes:\n$updated_shortcodes"
            fi

            if [ -n "$updated_installation_wizard" ]; then
              echo -e "$updated_installation_wizard"
            fi
          }

          update_shortcodes
          update_installation_wizard
          handle_results

      - name: Remove versions content file
        run: rm versions-content.txt

      # Needed for signing commits using Github App tokens
      # See: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#commit-signing
      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@v2.0.6
        id: generate-token
        with:
          app-id: ${{ vars.CSM_RELEASE_APP_ID }}
          private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

      # Must enable "allow GitHub Actions to create pull requests" setting
      # Author defaults to the user who triggered the workflow run
      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: "update-csm-versions-to-latest"
          commit-message: "Update CSM versions to latest"
          title: "Update CSM versions to latest"
          body: |
            Automated update all CSI Sidecars and Third Party Libraries to their latest version.

            Auto-generated by [common-github-actions](https://github.com/dell/common-github-actions)
          sign-commits: true
          delete-branch: true
