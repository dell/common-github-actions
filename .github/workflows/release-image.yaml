# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to push images to quay.io
name: Release Image

# Invocable as a reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: "Semantic version to release. Ex: major, minor, or patch"
        type: string
        required: true
      images:
        description: "List of image names. Example: csi-powerstore,csi-isilon"
        type: string
        required: true

jobs:
  push-images:
    if: ${{ inputs.version == 'patch' || inputs.version == 'minor' || inputs.version == 'major' }}
    name: Release images to Quay
    runs-on: ubuntu-latest
    steps:
      - name: Push images to Quay.io
        shell: bash
        run: |
          images_list=$(echo '${{ inputs.images }}' | tr -d '[]"' | tr ',' ' ')
          REPOSITORY="delltech/csm"

          for image in $images_list; do
            latest_version=$(curl -s https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/?limit=100 | jq -r '.tags[].name' | sort -V | tail -n 1)
            echo "Current latest version of $image:$latest_version"

            IFS='.' read -r -a version_parts <<< "$latest_version"

            if "${{ inputs.version == 'major' }}"; then
              version_parts[0]=$(expr ${version_parts[0]} + 1)
              new_version="${version_parts[0]}.0.0"
            fi
            if "${{ inputs.version == 'minor' }}"; then
              version_parts[1]=$(expr ${version_parts[1]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.0"
            fi
            if "${{ inputs.version == 'patch' }}"; then
              version_parts[2]=$(expr ${version_parts[2]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
            fi

            SHA=$(curl -s --location --request GET https://quay.io/api/v1/repository/$REPOSITORY/$image/tag?specificTag=nightly --header 'Content-Type: application/json' --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' | jq -r '.tags[0].manifest_digest')
            echo "Pushing image: $image:$new_version"

            curl --location --request PUT https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/$new_version \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
            --data-raw '{
              "manifest_digest": "'"$SHA"'"
            }'

            curl --location --request PUT https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/latest \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
            --data-raw '{
              "manifest_digest": "'"$SHA"'"
            }'
          done
