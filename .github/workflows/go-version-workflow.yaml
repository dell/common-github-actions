# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to perform go version update on Golang based projects
name: Update Go Version Workflow

on:
  workflow_call:

jobs:
    go-version:
      name: Update go version
      runs-on: ubuntu-latest
      steps:
      - name: Check latest go version
        # This script will get the major version of Go only, i.e. go1.23.
        run: |
          latest_version=$(curl -sL https://go.dev/VERSION?m=text | awk 'NR==1{print $1}')
          latest_version_stripped=$(curl -sL https://go.dev/VERSION?m=text | awk 'NR==1{print $1}' | tr -cd '[:digit:].')
          major_version=$(echo $latest_version_stripped | grep -oP '[0-9]+\.[0-9]+')

          if [[ -z "$latest_version" || -z "$major_version" ]]; then
            echo "Error: latest_version or major_version is empty"
            exit 1
          fi

          echo "latest_version=$latest_version" >> $GITHUB_ENV
          echo "major_version=$major_version" >> $GITHUB_ENV
          echo "The latest Go version is: $latest_version"
          echo "The latest major Go version is: $major_version"

      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.major_version }}"
          cache: false
          check-latest: true

      - name: Checkout the code
        uses: actions/checkout@v4

      # This step will update the go version in:
      # 1 - go.mod files and go.mod toolchain, if found
      # 2 - csm-common.mk for UBI image
      # 3 - github actions
      # 4 - Dockerfiles
      - name: Update go version
        env:
          gomod: go.mod
          grep_cmd2: grep -l "go-version"
          grep_cmd3: grep -l "FROM golang"
          exclude_file: go-version-workflow.yaml
        run: |
          echo "Updating go version to ${{ env.major_version }}"

          find . -type f -name "${{ env.gomod }}" -execdir sh -c '[ -f "{}" ] && go mod edit -go ${{ env.major_version }} && go mod tidy' \;

          find . -type f -name "${{ env.gomod }}" -execdir sh -c '[ -f "{}" ] && grep -q "toolchain" go.mod && go mod edit -toolchain ${{ env.latest_version }} && go mod tidy' \;

          if [ -f config/csm-common.mk ]; then sed -i "s/^DEFAULT_GOVERSION.*/DEFAULT_GOVERSION=${{ env.major_version }}/g" config/csm-common.mk; fi

          find . -type f ! -name "${{ env.exclude_file }}" -exec ${{ env.grep_cmd2 }} {} \; | while read -r file; do grep -v "hugo-version" "$file" | sed -i "s/go-version:.*/go-version: \"${{ env.major_version }}\"/" "$file"; done

          find . -type f ! -name "${{ env.exclude_file }}" -exec ${{ env.grep_cmd3 }} {} \; | while read -r file; do sed -i "s/golang:.*/golang:${{ env.major_version }}/" "$file"; done

      # Needed for signing commits using Github App tokens
      # See: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#commit-signing
      - uses: actions/create-github-app-token@v1.11.7
        id: generate-token
        with:
          app-id: ${{ vars.CSM_RELEASE_APP_ID }}
          private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

      # Must enable "allow GitHub Actions to create pull requests" setting
      # Author defaults to the user who triggered the workflow run
      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: "go-${{ env.major_version }}"
          commit-message: "Update go version to ${{ env.major_version }}"
          title: "Update go version to ${{ env.major_version }}"
          body: |
            Go version updated to ${{ env.major_version }}
            Auto-generated by [common-github-actions](https://github.com/dell/common-github-actions)
          sign-commits: true
          delete-branch: true
