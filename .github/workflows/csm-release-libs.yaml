# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release libraries like gobrick, gofsutil etc.
name: Release Go Client Libraries

# Invocable as a reusable workflow
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch), ex: 1.0.0'
        required: true
        type: string      
jobs:
  build-and-scan:    
    name: Build, Scan and Release
    runs-on: ubuntu-latest    
    steps:
      - name: Validate version input
        run: |
          if [[ "${{ github.event.inputs.version }}" == "none" ]]; then
            echo "Invalid version specified: ${{ github.event.inputs.version }} Must follow major, minor, patch versioning."
            exit 1
          fi
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install dependencies
        run: go mod tidy
      - name: Build
        run: go build -v ./...
      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
            gpg_private_key: ${{ secrets.CSM_GPG_PRIVATE_KEY }}
            git_user_signingkey: true
            git_commit_gpgsign: true
            git_tag_gpgsign: true
            git_config_global: true

      - name: Create new tag
        run: |
            git tag -s -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
            git push origin v${{ github.event.inputs.version }}

      - name: Create Release
        id: release_notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true
          make_latest: true
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          git checkout -b release/v${{ github.event.inputs.version }}
          git push origin release/v${{ github.event.inputs.version }}
