# Copyright (c) 2025 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to update Dell packages to the latest released version on CSM based projects
name: Update Dell Packages to Latest Released

on:
  workflow_call:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24"

    - name: Clean Go module cache
      run: |
        go clean -modcache

    - name: Grab Dell libraries file
      run: |
        export LIST="https://raw.githubusercontent.com/dell/common-github-actions/main/.github/configs/dell-libraries-list.txt"
        curl -O -f $LIST

    - name: Update packages to latest versions in go.mod
      run: |
        # temporarily disable the scripts exit on error
        set +e

        while IFS= read -r REPO
        do
          echo "Processing $REPO"

          if [[ $REPO == "github.com/dell/dell-csi-extensions" ]]; then
            SUBPACKAGES=("common" "migration" "podmon" "replication" "volumeGroupSnapshot")
            for SUBPACKAGE in "${SUBPACKAGES[@]}"; do
              if grep -q "$REPO/$SUBPACKAGE" go.mod; then
                echo "Updating $REPO/$SUBPACKAGE"
                go get ${REPO}/${SUBPACKAGE}@latest || echo "Failed to update $REPO/$SUBPACKAGE@$SHA"
              else
                echo "Skipping $REPO/$SUBPACKAGE: not a known dependency"
              fi
            done
            continue
          fi

          MODULE_PATH=$(go list -m -f '{{.Path}}' all | grep "^$REPO" 2>/dev/null)
          if [[ $? -ne 0 ]]; then
            echo "Skipping $REPO: not a known dependency"
            continue
          fi

          if [[ $MODULE_PATH == *"/v2"* ]]; then
            echo "Updating ${REPO}/v2@latest"
            go get ${REPO}/v2@latest || echo "Failed to update ${REPO}/v2"
          else
            echo "Updating ${REPO}@latest"
            go get ${REPO}@latest || echo "Failed to update ${REPO}"
          fi
        done < dell-libraries-list.txt
        go mod tidy

    # Delete file so it doesn't get included in the PR
    - name: Delete dell-libraries-list.txt
      run: |
        rm dell-libraries-list.txt

    # Needed for signing commits using Github App tokens
    # See: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#commit-signing
    - uses: actions/create-github-app-token@v2.0.6
      id: generate-token
      with:
        app-id: ${{ vars.CSM_RELEASE_APP_ID }}
        private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ steps.generate-token.outputs.token }}
        branch: "update-dependencies-to-latest-released"
        commit-message: "Update packages to latest released"
        title: "Update Dell libraries to latest released version"
        body: |
          This PR updates the specified packages to their latest released version.
          Auto-generated by [common-github-actions](https://github.com/dell/common-github-actions)
        sign-commits: true
        delete-branch: true

    - name: Wait for PR to be merged
      run: |
        branch="update-dependencies-to-latest-released"
        echo "Checking if there is an open PR for the branch '$branch'..."

        # Retrieve the list of open PRs for the specified branch.
        pr_list=$(gh pr list --head "$branch" --json number)

        # Count the number of open PRs using jq
        pr_count=$(echo "$pr_list" | jq '. | length')

        if [ "$pr_count" -eq 0 ]; then
          echo "No open PR found for the branch '$branch'."
        else
            echo "Waiting for the PR to be merged. Please merge the PR manually."
            while true; do
                pr_status=$(gh pr view "$branch" --json state --jq '.state')
                if [ "$pr_status" = "MERGED" ]; then
                    echo "PR has been merged."
                    break
                fi
                echo "PR not merged yet. Sleeping for 1 minute..."
                sleep 60
            done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.CSMBOT_PAT }}

    # Needed for pulling the latest commits from main branch once the PR gets merged from the previous step
    # Required for Trigger Release of Dell Libraries (trigger-auto-csm-release-golibs-workflow.yaml)
    - name: Pull latest changes from main
      run: |
        git pull origin main
