# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to perform release activities on Golang based projects
name: Release

# Invocable as a reusable workflow
on:
  workflow_call:

# Various jobs
jobs:
  release-version:
    name: Update Release Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Update release version references
        run: echo "executing release-version step"
        # grep for version references
        # create var with new version by incrementing the current version by 1
        # update version references
        # commit changes
        # push changes

  # only run after release-version PR is merged
  build-and-scan:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Install dependencies
        run: go mod tidy
      - name: Build
        run: go build -v ./...
      - name: Run tests
        run: go test -v ./...
      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@reusuable-release-workflow
        with:
          directories: .
          options: -ri
      - name: Run gosec to check for security vulnerabilities
        uses: dell/common-github-actions/gosec-runner@reusuable-release-workflow
        with:
          exclude-dir: tests/e2e
          directories: ./...

      - name: Create release branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout -b release/v${{ github.event.inputs.version }}
          git push origin release/v${{ github.event.inputs.version }}
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: true
          body: |
            ## Changes
            - Describe your changes here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment tag
        id: increment_tag
        run: |
          latest_tag=${{ env.latest_tag }}
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          new_tag="v$major.$minor.$((patch+1))"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false
          body: |
            ## Changes
            - Describe your changes here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}