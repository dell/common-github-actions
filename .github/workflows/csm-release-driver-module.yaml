# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release CSI Drivers and modules.
name: Release CSM Drivers and Modules

# Invocable as a reusable workflow
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch), ex: 2.2.0'
        required: true
      image:
        description: 'Image name, example: csi-powerstore'
        required: true

jobs:
  build-and-scan:
    name: Build, Scan and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

#      - name: Set up Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: "1.23"
#
#      - name: Install dependencies
#        run: go mod tidy
#
#      # TODO: build binaries like repctl, dellctl etc
#      - name: Build
#        run: go build -v ./...

  push-images:
    name: Release docker images
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Get Docker Token
        id: get_token
        run: |
          sudo apt install -y jq
          TOKEN=$(curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:dellemc/${{ github.event.inputs.image }}:pull,push" | jq -r '.token')
          echo "::set-output name=token::$TOKEN"

      - name: Get Docker Manifest
        run: |
          curl -s -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" https://index.docker.io/v2/dellemc/${{ github.event.inputs.image }}/manifests/nightly > manifest.json
          cat manifest.json

#      - name: Push Docker Manifest
#        run: |
#          curl -XPUT -s -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" -H "Content-type: application/vnd.docker.distribution.manifest.v2+json" https://index.docker.io/v2/dellemc/${{ github.event.inputs.image }}/manifests/v${{ github.event.inputs.version }} -d '@manifest.json'

      - name: Log in to Quay
        run: echo "${{ secrets.QUAY_PASSWORD }}" | docker login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

      - name: Get Quay Token
        id: get_quay_token
        run: |
          TOKEN=$(curl -s -u "${{ secrets.QUAY_USERNAME }}:${{ secrets.QUAY_PASSWORD }}" "https://quay.io/v2/auth?service=quay.io&scope=repository:delltech/csm/${{ github.event.inputs.image }}:pull,push" | jq -r '.token')
          echo "::set-output name=token::$TOKEN"

      - name: Get Quay Manifest
        run: |
          curl -s -H "Authorization: Bearer ${{ steps.get_quay_token.outputs.token }}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" https://quay.io/v2/delltech/csm/${{ github.event.inputs.image }}/manifests/nightly > manifest.json
          cat manifest.json

#      - name: Push Quay Manifest
#        run: |
#          curl -XPUT -s -H "Authorization: Bearer ${{ steps.get_quay_token.outputs.token }}" -H "Content-type: application/vnd.docker.distribution.manifest.v2+json" https://quay.io/v2/delltech/csm${{ github.event.inputs.image }}/manifests/v${{ github.event.inputs.version }} -d '@manifest.json'

  create-release:
    name: Create Release
    needs: push-images
    runs-on: ubuntu-latest
    steps:
      - name: Create new tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      # TODO: attach built binaries to the release
      - name: Create Release
        id: release_notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true
          make_latest: true
          body: |
            ## Documentation
            [General Documentation](https://dell.github.io/csm-docs/docs/)
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout -b release/v${{ github.event.inputs.version }}
          git push origin release/v${{ github.event.inputs.version }}
