# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release CSI Drivers and modules.
name: Release CSM Drivers and Modules

# Invocable as a reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: "Semantic version to release. Ex: major, minor, or patch"
        type: string
        required: true
      images:
        description: "List of image names. Example: csi-powerstore,csi-isilon"
        type: string
        required: true
jobs:
  build-and-scan:
    name: Build and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the full history including tags
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
      - name: Install dependencies
        run: go mod tidy
      - name: Build binaries
        run: |
          echo "Building binaries to attach to the release if any..."
          if "${{ inputs.images == 'cert-csi' }}"; then
              make build
              mv cert-csi cert-csi-linux-amd64
              echo "BIN_NAME=cert-csi-linux-amd64" >> $GITHUB_ENV
          fi
          if "${{ contains(inputs.images, 'dell-csi-replicator') || contains(inputs.images, 'dell-replication-controller') }}"; then
              cd repctl
              make build
              mv repctl repctl-linux-amd64
              mv repctl-linux-amd64 ../
              echo "BIN_NAME=repctl-linux-amd64" >> $GITHUB_ENV
          fi

      - name: Upload Binaries
        if: ${{ env.BIN_NAME != '' }}
        uses: actions/upload-artifact@v4.6.1
        env:
          BIN_NAME: ${{ env.BIN_NAME }}
        with:
          name: ${{ env.BIN_NAME }}
          path: ${{ env.BIN_NAME }}

  release-and-tag:
    name: Tag and Release
    needs: build-and-scan
    uses: dell/common-github-actions/.github/workflows/release-creator.yaml@main
    with:
      version: ${{ inputs.version }}
    secrets: inherit

  # we will not going to push images to dockerhub and quay for the patch release as we do not have the image to be retagged, The developers has to build and push it manually to the repository
  push-images:
    if: ${{ inputs.version == 'patch' || inputs.version == 'minor' || inputs.version == 'major' }}
    name: Release images to Dockerhub and Quay
    needs: release-and-tag
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push images to Dockerhub
        shell: bash
        run: |
          # Push each comma seperated images by splitting the string with ','
          images_list=$(echo '${{ inputs.images }}' | tr -d '[]"' | tr ',' ' ')
          for image in $images_list; do

            latest_version=$(curl -s https://registry.hub.docker.com/v2/repositories/dellemc/$image/tags | jq -r '.results[].name' | sort -V | tail -n 1)
            echo "Current latest version of $image:$latest_version"

            IFS='.' read -r -a version_parts <<< "$latest_version"

            if "${{ inputs.version == 'major' }}"; then
              # major version bump up
              version_parts[0]=$(expr ${version_parts[0]} + 1)
              new_version="${version_parts[0]}.0.0"
            fi
            if "${{ inputs.version == 'minor' }}"; then
              # minor version bump up
              version_parts[1]=$(expr ${version_parts[1]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.0"
            fi
            if "${{ inputs.version == 'patch' }}"; then
              # patch version bump up
              version_parts[2]=$(expr ${version_parts[2]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
            fi

           echo "Pushing image: $image:$new_version"                      
           docker pull dellemc/$image:nightly
           docker tag dellemc/$image:nightly dellemc/$image:$new_version
           docker push dellemc/$image:$new_version
           docker tag dellemc/$image:$new_version dellemc/$image:latest
           docker push dellemc/$image:latest
          done

      - name: Push images to Quay.io
        shell: bash
        run: |
          # Push each comma seperated images by splitting the string with ','
          images_list=$(echo '${{ inputs.images }}' | tr -d '[]"' | tr ',' ' ')

          REPOSITORY="dell/container-storage-modules"

          for image in $images_list; do

            latest_version=$(curl -s https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/?limit=100 | jq -r '.tags[].name' | sort -V | tail -n 1)
            echo "Current latest version of $image:$latest_version"

            IFS='.' read -r -a version_parts <<< "$latest_version"

            if "${{ inputs.version == 'major' }}"; then
              # major version bump up
              version_parts[0]=$(expr ${version_parts[0]} + 1)
              new_version="${version_parts[0]}.0.0"
            fi
            if "${{ inputs.version == 'minor' }}"; then
              # minor version bump up
              version_parts[1]=$(expr ${version_parts[1]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.0"
            fi
            if "${{ inputs.version == 'patch' }}"; then
              # patch version bump up
              version_parts[2]=$(expr ${version_parts[2]} + 1)
              new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
            fi

           # Get manifest digest
            SHA=$(curl -s --location --request GET https://quay.io/api/v1/repository/$REPOSITORY/$image/tag?specificTag=nightly --header 'Content-Type: application/json' --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' | jq -r '.tags[0].manifest_digest')            
            echo "Pushing image: $image:$new_version"

            # Create version and latest tags
            curl --location --request PUT https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/$new_version \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
            --data-raw '{
              "manifest_digest": "'"$SHA"'"
            }'

            curl --location --request PUT https://quay.io/api/v1/repository/$REPOSITORY/$image/tag/latest \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
            --data-raw '{
              "manifest_digest": "'"$SHA"'"
            }'
          done
