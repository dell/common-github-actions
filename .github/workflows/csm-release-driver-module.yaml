# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release CSI Drivers and modules.
name: Release CSM Drivers and Modules

# Invocable as a reusable workflow
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch), ex: 1.0.0'
        required: true
      image:
        description: 'Image name, ex: csm-powerstore'
        required: true

jobs:
  build-and-scan:
    name: Build, Scan and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod tidy

      # TODO: build binaries
      - name: Build
        run: go build -v ./...

      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri

      - name: Run gosec
        uses: dell/common-github-actions/gosec-runner@main
        with:
          directories: "./..."

  push-images:
    name: Pull, Tag and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Quay.io
        run: echo "${{ secrets.QUAY_PASSWORD }}" | docker login quay.io -u ${{ secrets.QUAY_USERNAME }} --password-stdin # TODO we need to store quay credentials in GitHub Secrets

      - name: Pull nightly image from Quay.io
        run: docker pull quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:nightly

      - name: Retag image
        run: |
          docker tag quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:nightly quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:v${{ github.event.inputs.version }}

          docker tag quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:nightly quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:latest

      - name: Push ${{ github.event.inputs.version }} tag to Quay.io
        run: docker push quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:v${{ github.event.inputs.version }}

      - name: Push latest tag to Quay.io
        run: docker push quay.io/dell/container-storage-modules/${{ github.event.inputs.image }}:latest

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create new tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      # TODO: attach built binaries to the release
      - name: Create Release
        id: release_notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true
          make_latest: true
          body: |
            ## Documentation
            [General Documentation](https://dell.github.io/csm-docs/docs/)

            ### Change Log
            See the [CHANGELOG](https://github.com/dell/csm/blob/release-v1.12.0/CHANGELOG/CHANGELOG-1.12.0.md) for more details.
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout -b release/v${{ github.event.inputs.version }}
          git push origin release/v${{ github.event.inputs.version }}
