# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release CSI Drivers and modules.
name: Release CSM Drivers and Modules

# Invocable as a reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: "Version to release (major, minor, patch). Example: 1.x.x"
        type: string
        required: true
      image:
        description: "Image name. Example: csi-powerstore"
        type: string
        required: true

jobs:
  build-and-scan:
    name: Build, Scan and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod tidy

      # TODO: build binaries if any like dellctl, repctl etc.
      - name: Build
        run: go build -v ./...

  push-images:
    name: Release images to Dockerhub and Quay
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: echo "will push docker image later ..."

      - name: Get Quay Manifest
        id: get_quay_manifest
        run: echo "get Quay Manifest"

      - name: Push Quay Manifest
        run: echo "will push quay images later ..."
        
  create-release:
    name: Create release and branch
    needs: push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
            gpg_private_key: ${{ secrets.CSM_GPG_PRIVATE_KEY }}
            git_user_signingkey: true
            git_commit_gpgsign: true
            git_tag_gpgsign: true
            git_config_global: true

      - name: Create new tag
        run: |
            git tag -s -a v${{ inputs.version }} -m "Release v${{ inputs.version }}"
            git push origin v${{ inputs.version }}
      
      # TODO: attach built binaries to the release (if any like repctl, dellctl etc.)
      - name: Create Release
        id: release_notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true
          make_latest: true
          body: |
            ## Documentation
            [General Documentation](https://dell.github.io/csm-docs/docs/)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          git checkout -b release/v${{ inputs.version }}
          git push origin release/v${{ inputs.version }}
