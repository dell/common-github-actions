# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release CSI Drivers and modules.
name: Release CSM Drivers and Modules

# Invocable as a reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: "Version to release (major, minor, patch). Example: 1.x.x"
        type: string
        required: true
      image:
        description: "Image name. Example: csi-powerstore"
        type: string
        required: true

jobs:
  build-and-scan:
    name: Build and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install dependencies
        run: go mod tidy
      # TODO: build binaries if any like dellctl, repctl etc.
      - name: Build
        run: go build -v ./...

  release-and-tag:
    name: Tag and Release
    needs: build-and-scan
    uses: dell/common-github-actions/.github/workflows/release-creator.yaml@main
    with:
      version: ${{ github.event.inputs.version }}
    secrets: inherit

  push-images:
    name: Release images to Dockerhub and Quay
    needs: release-and-tag
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker pull dellemc/${{ inputs.image }}:nightly
          docker tag dellemc/${{ inputs.image }}:nightly dellemc/${{ inputs.image }}:v${{ inputs.version }}
          docker push dellemc/${{ inputs.image }}:v${{ inputs.version }}
          docker tag dellemc/${{ inputs.image }}:v${{ inputs.version }} dellemc/${{ inputs.image }}:latest
          docker push dellemc/${{ inputs.image }}:latest

      - name: Get Quay Manifest
        id: get_quay_manifest
        run: |
          SHA=$(curl -s --location --request GET 'https://quay.io/api/v1/repository/dell/container-storage-modules/${{ inputs.image }}/tag?specificTag=nightly' --header 'Content-Type: application/json' --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' | jq -r '.tags[0].manifest_digest')
          echo "::set-output name=sha::$SHA"

      - name: Push Quay Manifest
        run: |
          curl -s --location --request PUT 'https://quay.io/api/v1/repository/dell/container-storage-modules/${{ inputs.image }}/tag/v${{ inputs.version }}' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
          --data-raw '{
            "manifest_digest": "${{ steps.get_quay_manifest.outputs.sha }}"
          }'
          curl -s --location --request PUT 'https://quay.io/api/v1/repository/dell/container-storage-modules/${{ inputs.image }}/tag/latest' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}' \
          --data-raw '{
            "manifest_digest": "${{ steps.get_quay_manifest.outputs.sha }}"
          }'
